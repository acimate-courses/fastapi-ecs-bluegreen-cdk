name: Deploy ECS Blue/Green
description: Reusable ECS deployment pipeline for CodeDeploy blue/green

inputs:
  aws-region:
    required: true
    description: AWS region to deploy to
  aws-account-id:
    required: true
    description: AWS account ID
  deploy-role-arn:
    required: true
    description: IAM role to assume for deployment
  stack-name:
    required: true
    description: CDK stack name
  image-tag:
    required: true
    description: Docker image tag
  ecr-repo:
    required: true
    description: ECR repository name

runs:
  using: "composite"
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.deploy-role-arn }}
        aws-region: ${{ inputs.aws-region }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image
      id: image
      shell: bash
      run: |
        IMAGE_URI=${{ inputs.aws-account-id }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/${{ inputs.ecr-repo }}:${{ inputs.image-tag }}
        docker build -t $IMAGE_URI .
        docker push $IMAGE_URI
        echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_OUTPUT

    - name: Get stack outputs
      id: describe
      shell: bash
      run: |
          # If you have CDK outputs JSON saved as a repo variable, parse it.
          # Alternatively, fetch via aws cloudformation describe-stacks.
          STACK_NAME=dev-fastapi-ecs-training-cluster-us-east-1-ecs-blue-green
          OUT=$(aws cloudformation describe-stacks --stack-name $STACK_NAME \
            --query "Stacks[0].Outputs" --output json)

          echo "EXEC_ROLE=arn:aws:iam::707690426194:role/dev-fastapi-ecs-training-clus-ExecutionRole605A040B-oG2NstvDeh4H" >> "$GITHUB_OUTPUT"
          echo "TASK_ROLE=arn:aws:iam::707690426194:role/dev-fastapi-ecs-training-cluster-u-TaskRole30FC0FBB-vLleMILPy1M2" >> "$GITHUB_OUTPUT"
          echo "CLUSTER=$(jq -r '.[] | select(.OutputKey=="ClusterName") | .OutputValue' <<< "$OUT")" >> "$GITHUB_OUTPUT"
          echo "SERVICE=$(jq -r '.[] | select(.OutputKey=="ServiceName") | .OutputValue' <<< "$OUT")" >> "$GITHUB_OUTPUT"
          echo "CD_APP=$(jq -r '.[] | select(.OutputKey=="CodeDeployApplicationName") | .OutputValue' <<< "$OUT")" >> "$GITHUB_OUTPUT"
          echo "CD_DG=$(jq -r '.[] | select(.OutputKey=="CodeDeployDeploymentGroupName") | .OutputValue' <<< "$OUT")" >> "$GITHUB_OUTPUT"
          echo "PRE_HOOK=$(jq -r '.[] | select(.OutputKey=="PreTrafficHookName") | .OutputValue' <<< "$OUT")" >> "$GITHUB_OUTPUT"
          echo "CONTAINER_NAME=$(jq -r '.[] | select(.OutputKey=="ContainerName") | .OutputValue' <<< "$OUT")" >> "$GITHUB_OUTPUT"
          echo "CONTAINER_PORT=$(jq -r '.[] | select(.OutputKey=="ContainerPort") | .OutputValue' <<< "$OUT")" >> "$GITHUB_OUTPUT"
          echo "ECR_URI=$(jq -r '.[] | select(.OutputKey=="EcrRepositoryUri") | .OutputValue' <<< "$OUT")" >> "$GITHUB_OUTPUT"                                                            
          cat $GITHUB_OUTPUT

    - name: Render task definition
      shell: bash
      env:
        IMAGE_URI: ${{ steps.image.outputs.IMAGE_URI }}
        EXEC_ROLE: ${{ steps.describe.outputs.EXEC_ROLE }}
        TASK_ROLE: ${{ steps.describe.outputs.TASK_ROLE }}
        CONTAINER_NAME: "AppContainer"

      run: |        
        TEMPLATE="task-definition-template.json"
        TASKDEF="taskdef.json"
        jq --arg IMAGE "$IMAGE_URI" \
           --arg EXEC_ROLE "$EXEC_ROLE" \
           --arg TASK_ROLE "$TASK_ROLE" \
           --arg CONTAINER_NAME "$CONTAINER_NAME" '
          .containerDefinitions |=
            (map(if .name == $CONTAINER_NAME then .image = $IMAGE | . else . end)) |
          .executionRoleArn = $EXEC_ROLE |
          .taskRoleArn = $TASK_ROLE
        ' $TEMPLATE > $TASKDEF

    - name: Register new task definition
      id: register
      shell: bash
      run: |
        ARN=$(aws ecs register-task-definition --cli-input-json file://taskdef.json \
          --query "taskDefinition.taskDefinitionArn" --output text)
        echo "TASKDEF_ARN=$ARN" >> $GITHUB_ENV

    - name: Create AppSpec file
      shell: bash
      env:
        PRE_HOOK: ${{ steps.describe.outputs.PRE_HOOK }}
        CONTAINER_NAME: "AppContainer"
        CONTAINER_PORT: "80"
        
      run: |
        cat > appspec.yaml <<EOF
        version: 1
        Resources:
          - TargetService:
              Type: AWS::ECS::Service
              Properties:
                TaskDefinition: $TASKDEF_ARN
                LoadBalancerInfo:
                  ContainerName: $CONTAINER_NAME
                  ContainerPort: $CONTAINER_PORT
        Hooks:
          AfterAllowTestTraffic:
            - location: $PRE_HOOK
              timeout: 300
        EOF

    - name: Create CodeDeploy deployment
      env:
        CD_APP: ${{ steps.describe.outputs.CD_APP }}
        CD_DG: ${{ steps.describe.outputs.CD_DG }}
      run: |
        chmod +x scripts/create_codedeploy_deployment.sh
        CD_APP=$CD_APP \
        CD_DG=$CD_DG \
        scripts/create_codedeploy_deployment.sh

